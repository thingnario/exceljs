{"version":3,"sources":["../../../../lib/xlsx/xform/list-xform.js"],"names":["utils","require","BaseXform","ListXform","module","exports","options","tag","count","empty","$count","$","childXform","inherits","prepare","model","forEach","childModel","render","xmlStream","length","openNode","addAttribute","closeNode","leafNode","parseOpen","node","parser","name","parseText","text","parseClose","push","undefined","reconcile"],"mappings":"AAAA;;;;;;AAMA;;AAEA,IAAIA,QAAQC,QAAQ,mBAAR,CAAZ;AACA,IAAIC,YAAYD,QAAQ,cAAR,CAAhB;;AAEA,IAAIE,YAAYC,OAAOC,OAAP,GAAiB,UAASC,OAAT,EAAkB;AACjD,OAAKC,GAAL,GAAWD,QAAQC,GAAnB;AACA,OAAKC,KAAL,GAAaF,QAAQE,KAArB;AACA,OAAKC,KAAL,GAAaH,QAAQG,KAArB;AACA,OAAKC,MAAL,GAAcJ,QAAQI,MAAR,IAAkB,OAAhC;AACA,OAAKC,CAAL,GAASL,QAAQK,CAAjB;AACA,OAAKC,UAAL,GAAkBN,QAAQM,UAA1B;AACD,CAPD;;AASAZ,MAAMa,QAAN,CAAeV,SAAf,EAA0BD,SAA1B,EAAqC;AACnCY,WAAS,iBAASC,KAAT,EAAgBT,OAAhB,EAAyB;AAChC,QAAIM,aAAa,KAAKA,UAAtB;AACA,QAAIG,KAAJ,EAAW;AACTA,YAAMC,OAAN,CAAc,UAASC,UAAT,EAAqB;AACjCL,mBAAWE,OAAX,CAAmBG,UAAnB,EAA+BX,OAA/B;AACD,OAFD;AAGD;AACF,GARkC;;AAUnCY,UAAQ,gBAASC,SAAT,EAAoBJ,KAApB,EAA2B;AACjC,QAAIA,SAASA,MAAMK,MAAnB,EAA2B;AACzBD,gBAAUE,QAAV,CAAmB,KAAKd,GAAxB,EAA6B,KAAKI,CAAlC;AACA,UAAI,KAAKH,KAAT,EAAgB;AACdW,kBAAUG,YAAV,CAAuB,KAAKZ,MAA5B,EAAoCK,MAAMK,MAA1C;AACD;;AAED,UAAIR,aAAa,KAAKA,UAAtB;AACAG,YAAMC,OAAN,CAAc,UAASC,UAAT,EAAqB;AACjCL,mBAAWM,MAAX,CAAkBC,SAAlB,EAA6BF,UAA7B;AACD,OAFD;;AAIAE,gBAAUI,SAAV;AACD,KAZD,MAYO,IAAI,KAAKd,KAAT,EAAgB;AACrBU,gBAAUK,QAAV,CAAmB,KAAKjB,GAAxB;AACD;AACF,GA1BkC;;AA4BnCkB,aAAW,mBAASC,IAAT,EAAe;AACxB,QAAI,KAAKC,MAAT,EAAiB;AACf,WAAKA,MAAL,CAAYF,SAAZ,CAAsBC,IAAtB;AACA,aAAO,IAAP;AACD;AACD,YAAQA,KAAKE,IAAb;AACE,WAAK,KAAKrB,GAAV;AACE,aAAKQ,KAAL,GAAa,EAAb;AACA,eAAO,IAAP;AACF;AACE,YAAI,KAAKH,UAAL,CAAgBa,SAAhB,CAA0BC,IAA1B,CAAJ,EAAqC;AACnC,eAAKC,MAAL,GAAc,KAAKf,UAAnB;AACA,iBAAO,IAAP;AACD;AACD,eAAO,KAAP;AATJ;AAWD,GA5CkC;AA6CnCiB,aAAW,mBAASC,IAAT,EAAe;AACxB,QAAI,KAAKH,MAAT,EAAiB;AACf,WAAKA,MAAL,CAAYE,SAAZ,CAAsBC,IAAtB;AACD;AACF,GAjDkC;AAkDnCC,cAAY,oBAASH,IAAT,EAAe;AACzB,QAAI,KAAKD,MAAT,EAAiB;AACf,UAAI,CAAC,KAAKA,MAAL,CAAYI,UAAZ,CAAuBH,IAAvB,CAAL,EAAmC;AACjC,aAAKb,KAAL,CAAWiB,IAAX,CAAgB,KAAKL,MAAL,CAAYZ,KAA5B;AACA,aAAKY,MAAL,GAAcM,SAAd;AACD;AACD,aAAO,IAAP;AACD;AACD,WAAO,KAAP;AACD,GA3DkC;AA4DnCC,aAAW,mBAASnB,KAAT,EAAgBT,OAAhB,EAAyB;AAClC,QAAIS,KAAJ,EAAW;AACT,UAAIH,aAAa,KAAKA,UAAtB;AACAG,YAAMC,OAAN,CAAc,UAASC,UAAT,EAAqB;AACjCL,mBAAWsB,SAAX,CAAqBjB,UAArB,EAAiCX,OAAjC;AACD,OAFD;AAGD;AACF;AAnEkC,CAArC","file":"list-xform.js","sourcesContent":["/**\n * Copyright (c) 2016 Guyon Roche\n * LICENCE: MIT - please refer to LICENCE file included with this module\n * or https://github.com/guyonroche/exceljs/blob/master/LICENSE\n */\n\n'use strict';\n\nvar utils = require('../../utils/utils');\nvar BaseXform = require('./base-xform');\n\nvar ListXform = module.exports = function(options) {\n  this.tag = options.tag;\n  this.count = options.count;\n  this.empty = options.empty;\n  this.$count = options.$count || 'count';\n  this.$ = options.$;\n  this.childXform = options.childXform;\n};\n\nutils.inherits(ListXform, BaseXform, {\n  prepare: function(model, options) {\n    var childXform = this.childXform;\n    if (model) {\n      model.forEach(function(childModel) {\n        childXform.prepare(childModel, options);\n      });\n    }\n  },\n  \n  render: function(xmlStream, model) {\n    if (model && model.length) {\n      xmlStream.openNode(this.tag, this.$);\n      if (this.count) {\n        xmlStream.addAttribute(this.$count, model.length);\n      }\n\n      var childXform = this.childXform;\n      model.forEach(function(childModel) {\n        childXform.render(xmlStream, childModel);\n      });\n\n      xmlStream.closeNode();\n    } else if (this.empty) {\n      xmlStream.leafNode(this.tag);\n    }\n  },\n\n  parseOpen: function(node) {\n    if (this.parser) {\n      this.parser.parseOpen(node);\n      return true;\n    }\n    switch (node.name) {\n      case this.tag:\n        this.model = [];\n        return true;\n      default:\n        if (this.childXform.parseOpen(node)) {\n          this.parser = this.childXform;\n          return true;\n        }\n        return false;\n    }\n  },\n  parseText: function(text) {\n    if (this.parser) {\n      this.parser.parseText(text);\n    }\n  },\n  parseClose: function(name) {\n    if (this.parser) {\n      if (!this.parser.parseClose(name)) {\n        this.model.push(this.parser.model);\n        this.parser = undefined;\n      }\n      return true;\n    }\n    return false;\n  },\n  reconcile: function(model, options) {\n    if (model) {\n      var childXform = this.childXform;\n      model.forEach(function(childModel) {\n        childXform.reconcile(childModel, options);\n      });\n    }\n  }\n});\n"]}